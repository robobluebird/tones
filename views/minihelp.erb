<script type="text/javascript">
  const postComment = (e) => {
    e.preventDefault()

    let form = e.target
    let refId = form.id.split('_')[1]
    let tuneId = parseInt(refId.split('-')[1])
    let input = document.querySelector(`#commentInput${tuneId}`)
    let look = document.querySelector(`#freeLookInput_tune-${tuneId}`).value
    let token = form.querySelector(":scope input[name='authenticity_token']").value

    if (input.value.length === 0 && look.length === 0)
      return false

    let url = form.action
    let method = form.method
    let userId = form.querySelector(':scope input[name="user_id"]').value
    let body = form.querySelector(':scope input[name="body"]').value
    let btn = form.querySelector(':scope input[type="submit"]')
    let xhr = new XMLHttpRequest();
    xhr.open(method, url, true);
    xhr.setRequestHeader('Content-Type', 'application/json')
    xhr.setRequestHeader('X-CSRF-Token', token)
    xhr.onreadystatechange = function() {
      if (this.readyState != 4) return
      if (this.status == 200) {
        input.value = ''
        input.blur()
        btn.disabled = true
        let data = JSON.parse(this.responseText)
        document.querySelector(`#comments${tuneId}`).insertAdjacentHTML('afterbegin', data.commentHtml)

        let ml = [...document.querySelector(`#comments${tuneId}`).firstChild.querySelectorAll(':scope .minilookContainer')]

        layoutMinilooks(ml)

        document.querySelector(`#drawSomethingOpener_tune-${tuneId}`).innerText = 'draw something'

        let h = document.querySelector(`#drawSomethingHolder_tune-${tuneId}`)

        h.classList.add('hidden')

        forEach(h.querySelectorAll(':scope .lookCell'), (i, c) => {
          c.classList.remove(...colors)
        })

        forEach(document.querySelectorAll('.drawSomethingHolder'), (i, d) => {
          d.classList.add('hidden')
          forEach(d.querySelectorAll(':scope .lookCell'), (i, cell) => {
            cell.classList.remove(...colors)
          })
        })

        forEach(document.querySelectorAll('.drawSomethingOpener'), (i, o) => {
          o.innerText = "draw something"
        })
      } else {
        console.error("BAD: ", this.status, this.responseText)
      }
    }

    let bag = {
      user_id: userId,
      body: body,
      look: look
    }

    xhr.send(JSON.stringify(bag));
  }

  const likeOrUnlike = (e) => {
    e.preventDefault()

    let form = e.target
    let url = form.action
    let method = form.method
    let userId = form.querySelector(':scope input[name="user_id"]').value
    let tuneId = parseInt(form.id.slice(8))
    let token = form.querySelector(":scope input[name='authenticity_token']").value
    let xhr = new XMLHttpRequest();
    xhr.open(method, url, true);
    xhr.setRequestHeader('Content-Type', 'application/json')
    xhr.setRequestHeader('X-CSRF-Token', token)
    xhr.onreadystatechange = function() {
      if (this.readyState != 4) return
      if (this.status == 200) {
        let data = JSON.parse(this.responseText)
        document.querySelector(`#likes${tuneId}`).innerHTML = data.likeHtml
        document.querySelector(`#likeForm${tuneId}`).onsubmit = likeOrUnlike
      } else {
        console.error("BAD: ", this.status, this.responseText)
      }
    }

    let bag = {
      user_id: userId
    }

    xhr.send(JSON.stringify(bag));
  }

  forEach(document.querySelectorAll('.likeForm'), (index, form) => {
    form.onsubmit = likeOrUnlike
  })

  forEach(document.querySelectorAll('.commentForm'), (index, form) => {
    form.onsubmit = postComment
  })

  forEach(document.querySelectorAll('.commentInput'), (index, input) => {
    input.onkeyup = (e) => {
      let id = parseInt(e.target.id.slice(12))
      document.querySelector(`#submitComment${id}`).disabled = e.target.value.length === 0 && document.querySelector(`#freeLookInput_tune-${id}`).value.length === 0
    }
  })

  forEach(document.querySelectorAll('.tuneGrid'), (index, elem) => {
    elem.onclick = (e) => {
      e.preventDefault()

      let rep = elem.getAttribute('data-rep')
      let id = parseInt(elem.id.slice(8))

      togglePlay(id, rep)
    }
  })
</script>
