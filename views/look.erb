<% form_action = "/looks" unless form_action %>
<% form_method = "post" unless form_method %>
<% editable = false unless editable %>
<% look = "" unless look %>
<% editNow = false unless editNow %>
<% if editable %>
  <div style="text-align: right; padding-bottom: 0.5em;">
    <a href="#" id="editNow" class="startEditing<%= " hidden" if editNow %>">edit</a>
  </div>
  <div id="lookTools" class="lookTools<%= " hidden" unless editNow %>">
    <% if look == '' || look.nil? %>
      <p>Create an icon for your profile by painting in the 16x16 grid below. Or, <a href="/">skip this.</a> You can do it later from your profile page.</p>
    <% end %>
    <% %w(red lightred darkred orange orangered darkorange yellow lightyellow gold green lightgreen darkgreen blue lightblue darkblue purple lightpurple darkpurple pink lightpink gray black brown lightbrown white).each_with_index do |c, i| %>
      <div data-color="<%= c %>" class="colorCell <%= c %> <%= 'selected' if i == 0 %>">
        <div class="lookCellHeight"></div>
      </div> 
    <% end %>
    <%= erb :minilook, locals: {data_color: 'erase', klass: 'colorCell', url: '#', _id: 'erase', width: '16px', look: '00000100020003000400050006000700080009000A000B000C000D000E000F00100011001E001F00200022002D002F00300033003C003F00400044004B004F00500055005A005F006000660069006F007000770078007F008000870088008F009000960099009F00A000A500AA00AF00B000B400BB00BF00C000C300CC00CF00D000D200DD00DF00E000E100EE00EF00F000F100F200F300F400F500F600F700F800F900FA00FB00FC00FD00FE00FF00'} %>
  </div>
<% end %>
<div class="look noselect">
  <% (16 * 16).times do |i| %><div class="noselect lookCell <%= editable && editNow && (i.to_f / 16).floor.even? ? i.even? ? 'gray4' : 'gray5' : (i.even? ? 'gray5' : 'gray4') if editable && editNow %>"><div class="lookCellHeight noselect"></div></div><% end %>
</div>
<% if editable %>
  <form id="lookForm" class="lookForm<%= " hidden" unless editNow %>" action="<%= form_action %><%= params[:r] ? "?r=#{params[:r]}" : '' %>" method="<%= form_method %>">
    <input type="hidden" name="authenticity_token" value="<%= env['rack.session'][:csrf] %>" />
    <input type="hidden" name="look" />
    <input type="submit" value="save" />
  </form>
<% end %>
<script type="text/javascript">
  let editable = <%= editable %>
  let editNow = <%= editNow %>
  let color = 'red'
  let mouseDown = false
  let rep = "<%= look %>"
  let actions = []

  const encode = () => {
    rep = ""

    let all = document.querySelector('.look')
    forEach(document.querySelectorAll('.look .lookCell'), (i, cell) => {
      let classNames = [...cell.classList.entries()].map(e => e[1])
      let foundColor = classNames.find(c => colors.includes(c))

      if (!!foundColor) {
        rep = rep.concat(
          i.toString(16).toUpperCase().padStart(2, '0'),
          colors.indexOf(foundColor).toString(16).toUpperCase().padStart(2, '0')
        )
      }
    })

    document.querySelector("form.lookForm input[name='look']").value = rep
  }

  const init = () => {
    if (rep === null || rep === undefined || rep.length === 0) {
      const params = (new URL(document.location)).searchParams
      const repParam = params.get('l')

      if (repParam != null && repParam != undefined) {
        rep = repParam
        parseRep()
      }
    } else {
      parseRep()
    }

    if (editable) {
      if (editNow) {
        hookup()
      } else {
        document.querySelector('#editNow').onclick = (e) => {
          e.preventDefault()
          e.target.classList.add('hidden')
          document.querySelector('#lookTools').classList.remove('hidden')
          document.querySelector('#lookForm').classList.remove('hidden')
          document.querySelector('.look').classList.add('pointy')
          let all = document.querySelector('.look')
          forEach(all.querySelectorAll(':scope .lookCell'), (i, cell) => {
            if (Math.floor(i / 16) % 2 === 0) {
              if (i % 2 === 0) {
                cell.classList.add('gray4')
              } else {
                cell.classList.add('gray5')
              }
            } else {
              if (i % 2 === 0) {
                cell.classList.add('gray5')
              } else {
                cell.classList.add('gray4')
              }
            }
          })
          hookup()
        }
      }
    }
  }

  const parseRep = () => {
    let all = document.querySelector('.look')
    let cells = [...all.querySelectorAll(':scope .lookCell')]

    rep.match(/.{1,4}/g) // get groups of 4
       .forEach(cellRep => {
         let positionIndex = parseInt(cellRep.slice(0, 2), 16)
         let colorIndex = parseInt(cellRep.slice(2, 4), 16)

         cells[positionIndex].classList.remove(...colors)
         cells[positionIndex].classList.add(colors[colorIndex])
       })
  }

  const hookup = () => {
    let all = document.querySelector('.look')
    forEach(all.querySelectorAll(':scope .lookCell'), (i, cell) => {
      cell.onmousedown = (e) => {
        e.preventDefault()

        mouseDown = true
        
        if (color === 'erase') {
          e.target.classList.remove(...colors)
        } else {
          e.target.classList.remove(...colors)
          e.target.classList.add(color)
        }
      }

      cell.onmousemove = (e) => {
        e.preventDefault()

        if (mouseDown) {
          if (color === 'erase') {
            e.target.classList.remove(...colors)
          } else {
            e.target.classList.remove(...colors)
            e.target.classList.add(color)
          }
        }
      }

      cell.ontouchstart = (e) => {
        e.preventDefault()

        mouseDown = true

        if (color === 'erase') {
          e.target.classList.remove(...colors)
        } else {
          e.target.classList.remove(...colors)
          e.target.classList.add(color)
        }
      }

      cell.ontouchmove = (e) => {
        e.preventDefault()

        let touch = e.touches[0]
        let elem = document.elementFromPoint(touch.clientX, touch.clientY)

        if (mouseDown && elem.classList.contains('lookCell')) {
          if (color === 'erase') {
            e.target.classList.remove(...colors)
          } else {
            elem.classList.remove(...colors)
            elem.classList.add(color)
          }
        }
      }
    })

    document.onmouseup = (e) => {
      mouseDown = false
      encode()
    }

    document.ontouchend = (e) => {
      mouseDown = false
      encode()
    }

    forEach(document.querySelectorAll('.colorCell'), (i, c) => {
      c.onclick = (e) => {
        e.preventDefault()

        forEach(document.querySelectorAll('.colorCell'), (i, d) => {
          d.classList.remove('selected')
        })

        c.classList.add('selected')
        color = c.getAttribute('data-color')
      }
    })
  }

  init()
</script>
