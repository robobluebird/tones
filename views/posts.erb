<div>
  <% if current_user %>
    <div class="newPost post">
      <div><b>new post</b></div>
      <form action="/posts" method="post">
        <input type="hidden" name="authenticity_token" value="<%= env['rack.session'][:csrf] %>" />
        <div class="smolTopAndBottomMargin">
          <input class="fullWidth" type="text" name="title" placeholder="title of new post" />
        </div>
        <div class="smolTopAndBottomMargin">
          <textarea id="area0" name="body" placeholder="body of new post"></textarea>
        </div>
        <input type="hidden" name="user_id" value=<%= current_user.id %> />
        <div class="submitPostHolder">
          <a id="drawsomethingopener_post-0" href="#" class="drawsomethingopener">draw something</a>
          <div id="drawsomethingholder_post-0" class="drawsomethingholder hidden">
            <%= erb :free_look, locals: {
              formName: 'look',
              ref_id: 'post-0',
              submit_name: 'submit',
              input_name: 'area'
            } %>
          </div>
          <input disabled type="submit" id="submit0" />
        </div>
      </form>
    </div>
  <% end %>
  <div class="paging">
    <% if page && page > 1 %>
      <a href="#" onclick="replaceOrAddSearchParam('page', 1); return false;">first</a>
    <% end %>
    <% if page && page > 1 %>
      <a href="#" onclick="replaceOrAddSearchParam('page', <%= page - 1 %>); return false;">prev</a>
    <% end %>
    <% if page && post_page_count %>
      <span>page <%= page %> of <%= post_page_count %></span>
    <% end %> <% if page && post_page_count && page < post_page_count %>
      <a href="#" onclick="replaceOrAddSearchParam('page', <%= page + 1 %>); return false;">next</a>
    <% end %>
    <% if page && page < post_page_count %>
      <a href="#" onclick="replaceOrAddSearchParam('page', <%= post_page_count %>); return false;">last</a>
    <% end %>
  </div>
  <% if @posts.empty? %>
    <div class="post">
      nothing to see here!
    </div>
  <% end %>
  <% @posts.each do |p| %>
    <div class="post">
      <div class="body">
        <% if p.title %>
          <div class="title">
            <%= p.title %>
          </div>
        <% end %>
        <% if p.look && p.look.length > 0 %>
          <%= erb :minilook, locals: {width: '8em', xtraStyle: 'float: left; margin: 0 0.5em 0.5em 0;', look: p.look, url: nil} %>
        <% end %>
        <div class="text" id="text<%= p.id %>">
          <% p.parsed.each do |bp| %><% if bp.first == :q %><div class="quote"><%= bp.last %></div><% else %><span><%= bp.last %></span><% end %>
          <% end %>
        </div>
        <div class="commentInfo">
          <%= p.user.name %>
          <% if p.user.look %>
            <%= erb :minilook, locals: {width: '16px', look: p.user.look, url: "/users/#{p.user.id}/look"} %>
          <% end %> - <%= chron p.created_at %><% if current_user %> - <a class="doQuote" data-userName="<%= p.user.name %>" href="#" id="quote<%= p.id %>-<%= p.id %>">quote</a><% end %>
        </div>
      </div>
      <div class="replies" id="replies<%= p.id %>">
        <% p.replies.each do |r| %>
          <%= erb :post_reply, locals: {parent_id: p.id, post: r} %>
        <% end %>
      </div>
      <% if current_user %>
        <div class="reply">
          <div class="newPost">
            <form action="/posts/<%= p.id %>/posts" method="post" class="postReplyForm" id="postReplyForm_post-<%= p.id %>">
              <input type="hidden" name="authenticity_token" value="<%= env['rack.session'][:csrf] %>" />
              <div>
                <textarea id="area<%= p.id %>" name="body" placeholder="type a reply"></textarea>
              </div>
              <input type="hidden" name="user_id" value=<%= current_user.id %> />
              <div class="submitPostHolder">
                <a id="drawSomethingOpener_post-<%= p.id %>" href="#" class="drawSomethingOpener">draw something</a>
                <div id="drawSomethingHolder_post-<%= p.id %>" class="drawSomethingHolder hidden">
                  <%= erb :free_look, locals: {ref_id: "post-#{p.id}", submit_name: 'submit', input_name: 'area'} %>
                </div>
                <input disabled type="submit" id="submit<%= p.id %>" />
              </div>
            </form>
          </div>
        </div>
      <% end %>
    </div>
  <% end %>
  <div class="paging bottom">
    <% if page && page > 1 %>
      <a href="#" onclick="replaceOrAddSearchParam('page', 1); return false;">first</a>
    <% end %>
    <% if page && page > 1 %>
      <a href="#" onclick="replaceOrAddSearchParam('page', <%= page - 1 %>); return false;">prev</a>
    <% end %>
    <% if page && post_page_count %>
      <span>page <%= page %> of <%= post_page_count %></span>
    <% end %> <% if page && post_page_count && page < post_page_count %>
      <a href="#" onclick="replaceOrAddSearchParam('page', <%= page + 1 %>); return false;">next</a>
    <% end %>
    <% if page && page < post_page_count %>
      <a href="#" onclick="replaceOrAddSearchParam('page', <%= post_page_count %>); return false;">last</a>
    <% end %>
  </div>
</div>
<%= erb :free_look_help %>
<%= erb :minilookhelp %>
<%= erb :page_help %>
<script type="text/javascript">
  const quoteClick = (e) => {
    e.preventDefault()

    let idStrParts = e.target.id.slice(5).split('-')
    let postId = parseInt(idStrParts[0])
    let replyId = parseInt(idStrParts[1])
    let name = e.target.getAttribute('data-userName')
    let text = [...document.querySelector(`#text${replyId}`).children].map(c => {
      if (c.className === 'quote')
        return `[${c.innerText}]` 
      else
        return c.innerText
    }).join(' ')
    let area = document.querySelector(`#postReplyForm_post-${postId} textarea`)
    area.value = area.value + "'''" + text + ' -' + name + "'''\n"
  }

  const postReply = (e) => {
    e.preventDefault()

    let form = e.target
    let input = form.querySelector(':scope textarea')
    let refId = form.id.split('_')[1]
    let postId = parseInt(refId.split('-')[1])
    let look = document.querySelector(`#freeLookInput_${refId}`).value
    let token = form.querySelector(":scope input[name='authenticity_token']").value

    if (input.value.length === 0 && look.length === 0)
      return false

    let url = form.action
    let method = form.method
    let userId = form.querySelector(':scope input[name="user_id"]').value
    let body = input.value
    let btn = form.querySelector(':scope input[type="submit"]')
    let xhr = new XMLHttpRequest();
    xhr.open(method, url, true);
    xhr.setRequestHeader('Content-Type', 'application/json')
    xhr.setRequestHeader('X-CSRF-Token', token)
    xhr.onreadystatechange = function() {
      if (this.readyState != 4) return
      if (this.status == 200) {
        input.value = ''
        input.blur()
        btn.disabled = true
        let data = JSON.parse(this.responseText)
        document.querySelector(`#replies${postId}`).insertAdjacentHTML('beforeend', data.postHtml)
        document.querySelector(`#quote${postId}-${data.id}`).onclick = quoteClick
        let ml = [...document.querySelectorAll(`#reply${data.id} .minilookContainer`)]
        layoutMinilooks(ml)

        forEach(document.querySelectorAll('.drawSomethingHolder'), (i, d) => {
          d.classList.add('hidden')
          forEach(d.querySelectorAll(':scope .lookCell'), (i, cell) => {
            cell.classList.remove(...colors)
          })
        })

        forEach(document.querySelectorAll('.drawSomethingOpener'), (i, o) => {
          o.innerText = "draw something"
        })
      } else {
        console.error("BAD: ", this.status, this.responseText)
      }
    }

    let bag = {
      user_id: userId,
      body: body,
      look: look
    }

    xhr.send(JSON.stringify(bag));
  }

  forEach(document.querySelectorAll('.postReplyForm'), (index, form) => {
    form.onsubmit = postReply
  })

  forEach(document.querySelectorAll('.doQuote'), (index, q) => {
    q.onclick = quoteClick
  })

  forEach(document.querySelectorAll('textarea'), (index, input) => {
    let id = parseInt(input.id.slice(4))
    let btn = document.querySelector(`#submit${id}`)
    input.onkeyup = (e) => {
      btn.disabled = input.value.length === 0
    }
  })
</script>
